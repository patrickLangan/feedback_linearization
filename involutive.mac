load("lie_bracket");
load("super_radcan");

/*
* Check if a distribuion is involutive.
* Method used: wolfweb.unr.edu/~fadali/EE776/FeedbackLinearization.pdf
*/
involutive(G, x) := block(
	[
		n: length(G[1]),
		i, j, ip, jp, Gc, R, adGiGj
	],

	printf(verbose, "Canonicalizing G~%"),
	Gc: super_radcan(G),

	printf(verbose, "Finding rank of G~%"),
	R: rank(Gc),
	return(catch(
	for i: 1 thru n - 1 do
		for j: i + 1 thru n do (
			ip: unicode(i + 8320), jp: unicode(j + 8320),
			printf(verbose, "Formulating [G~c, G~c]~%", ip, jp),
			adGiGj: super_radcan(lie_bracket(col(Gc, i), col(Gc, j), x)),
			printf(verbose, "Checking that [G~c, G~c] ϵ G~%", ip, jp),
			if rank(addcol(Gc, adGiGj)) # R then (
				printf(verbose, "[G~c, G~c] ∉ G~%", ip, jp),
				throw(false)
			)
		),
		printf(verbose, "∀f∀g: f ϵ G ⋏ g ϵ G ⇒ [f, g] ϵ G~%"),
		throw(true)
	))
)$

